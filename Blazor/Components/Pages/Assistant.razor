@page "/assistant"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory

<h1>Assistant</h1>

@if (getRequestError)
{
    <p>Unable to get forcast from backend. Please try again later.</p>
}
else
{
    <form class="row g-3" @onsubmit="Submit" method="post" @formname="queryForm">
        <div class="form-floating" >
            <AntiforgeryToken />
            <InputTextArea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 100px"  @bind-Value="query" />
            <label for="floatingTextarea2">Question</label>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary mb-3">Submit</button>
        </div>
    </form>

    <div>
        Answer: @answer
    </div>

}

@code {
    [SupplyParameterFromForm]
    public string? query { get; set; }

    private string? answer = String.Empty;

    private bool getRequestError;

    private bool loading;

    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private void Submit()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
       $"https://localhost:7015/api/Product/Search/{query}");

        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = client.SendAsync(request).Result;

        if (response.IsSuccessStatusCode)
        {
            answer = response.Content.ReadAsStringAsync().Result;
            query = "";
        }
        else
        {
            getRequestError = true;
        }

        shouldRender = true;
    }
}