@page "/assistant"
@attribute [StreamRendering]
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Assistant</h1>

@if (getBranchesError)
{
    <p>Unable to get forcast from backend. Please try again later.</p>
}
else if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table caption-top table-hover">
        <caption>List of products</caption>
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Category</th>
                <th scope="col">CreatedDate</th>
            </tr>
        </thead>
        <tbody>
            
            @foreach (var product in products)
            {
                <tr>
                    <th scope="row">@product.Id</th>
                    <td>@product.Title</td>
                    <td>@product.Description</td>
                    <td>@product.Category</td>
                    <td>@product.CreatedDate.ToLocalTime()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product>? products;
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7015/api/Product/GetProducts");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadAsAsync<IEnumerable<Product>>();
            
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

    public class Product
    {
        public int Id { get; set; }

        public string? Title { get; set; }

        public string? Description { get; set; }

        public string? Category { get; set; }

        public DateTime CreatedDate { get; set; } = DateTime.Now;
    }
}