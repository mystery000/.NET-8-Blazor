@page "/test"
@attribute [StreamRendering]
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Call web API from a Blazor Server Razor component</h1>

@if (getBranchesError)
{
    <p>Unable to get forcast from backend. Please try again later.</p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (var forecast in forecasts)
        {
            <li>@forecast.Summary</li>
        }
    </ul>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7015/WeatherForecast");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            forecasts = await response.Content.ReadAsAsync<IEnumerable<WeatherForecast>>();
            
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }


    private class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}